#include <iostream>
#include <vector>
#include <string>

using namespace std;

struct Task {
    string description;
    bool completed;
};


void addTask(vector<Task>& tasks, const string& description) {
    Task newTask;
    newTask.description = description;
    newTask.completed = false;
    tasks.push_back(newTask);
    cout << "Task added successfully!" << endl;
}

void viewTasks(const vector<Task>& tasks) {
    cout << "To-Do List:" << endl;
    for (size_t i = 0; i < tasks.size(); ++i) {
        cout << i + 1 << ". " << tasks[i].description;
        if (tasks[i].completed) {
            cout << " (completed)";
        } else {
            cout << " (pending)";
        }
        cout << endl;
    }
}


void markTaskCompleted(vector<Task>& tasks, size_t index) {
    if (index >= 0 && index < tasks.size()) {
        tasks[index].completed = true;
        cout << "Task marked as completed!" << endl;
    } else {
        cout << "Invalid task index!" << endl;
    }
}


void removeTask(vector<Task>& tasks, size_t index) {
    if (index >= 0 && index < tasks.size()) {
        tasks.erase(tasks.begin() + index);
        cout << "Task removed successfully!" << endl;
    } else {
        cout << "Invalid task index!" << endl;
    }
}

int main() {
    vector<Task> tasks;

    while (true) {
        cout << "Choose an option:" << endl;
        cout << "1. Add Task" << endl;
        cout << "2. View Tasks" << endl;
        cout << "3. Mark Task as Completed" << endl;
        cout << "4. Remove Task" << endl;
        cout << "5. Exit" << endl;

        int choice;
        cin >> choice;

        switch (choice) {
            case 1: {
                cout << "Enter task description: ";
                string description;
                cin.ignore(); // Clear the input buffer
                getline(cin, description);
                addTask(tasks, description);
                break;
            }
            case 2: {
                if (tasks.empty()) {
                    cout << "No tasks to display." << endl;
                } else {
                    viewTasks(tasks);
                }
                break;
            }
            case 3: {
                if (tasks.empty()) {
                    cout << "No tasks available to mark as completed." << endl;
                } else {
                    cout << "Enter task index to mark as completed: ";
                    size_t index;
                    cin >> index;
                    markTaskCompleted(tasks, index - 1);
                }
                break;
            }
            case 4: {
                if (tasks.empty()) {
                    cout << "No tasks available to remove." << endl;
                } else {
                    cout << "Enter task index to remove: ";
                    size_t index;
                    cin >> index;
                    removeTask(tasks, index - 1);
                }
                break;
            }
            case 5: {
                cout << "Exiting program." << endl;
                return 0;
            }
            default:
                cout << "Invalid choice. Please try again." << endl;
        }
    }

    return 0;
}
